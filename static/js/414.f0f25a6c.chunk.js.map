{"version":3,"file":"static/js/414.f0f25a6c.chunk.js","mappings":"uMAkDA,UA9Ca,WACX,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAkCE,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KAuBA,OArBAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAcR,GACXS,MAAK,YASJ,MAAO,CAAEC,UATS,EAAXC,KACgBC,KACrB,kBAAqD,CACnDC,aADF,EAAGA,aAEDC,cAFF,EAAiBA,cAGfC,UAHF,EAAgCA,UAI9BC,GAJF,EAA2CA,GAA3C,IAQH,IACAP,MAAK,YAAoB,IAAjBC,EAAgB,EAAhBA,UACPN,GAAa,OAAIM,GAClB,IACAO,OAAM,SAAAZ,GACLC,EAASD,EAAMa,QAChB,GACJ,GAAE,CAAClB,KAGF,iCACE,wBACGG,EAAUS,KAAI,gBAAGC,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,cAAeC,EAAhC,EAAgCA,UAAWC,EAA3C,EAA2CA,GAA3C,OACb,2BACE,gBACEG,KAAKC,EAAAA,EAAAA,IAAUP,GACfQ,IAAKP,EACLQ,MAAO,OAET,uBAAIR,KACJ,uBAAIC,MAPGC,EADI,MAYhBX,IAAS,uBAAIA,MAGnB,C,kRC7CDkB,EAAAA,EAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAU,mCAEVC,EAAsBC,EAEfN,EAAY,SAAAO,GAAG,OAC1BA,EAJqB,mCAIEA,EAAMF,CADH,EAKrB,SAAeG,EAAtB,kC,aAAO,O,oBAAA,WAAiCC,GAAjC,gHAEoBN,EAAAA,EAAAA,IAAA,gBAAmBM,EAAnB,oBAAgCL,IAFpD,cAEGM,EAFH,SAWCA,EAASC,KAPXC,EAJC,EAIDA,OACAhB,EALC,EAKDA,GACAiB,EANC,EAMDA,MACAC,EAPC,EAODA,YACAC,EARC,EAQDA,SACAC,EATC,EASDA,aACAC,EAVC,EAUDA,aAVC,kBAYI,CACLL,OAAAA,EACAhB,GAAAA,EACAiB,MAAAA,EACAC,YAAAA,EACAC,SAAAA,EACAC,aAAAA,EACAC,aAAAA,IAnBC,sCAsBG,IAAIC,MAAJ,MAtBH,gFA4BA,SAAeC,EAAtB,kC,aAAO,O,oBAAA,WAA2BC,GAA3B,gGAEoBjB,EAAAA,EAAAA,IAAA,+BACGC,EADH,kBACoBgB,EADpB,YAFpB,cAEGV,EAFH,yBAKIA,EAASC,MALb,sCAOG,IAAIO,MAAJ,MAPH,gFAaA,SAAeG,IAAtB,+B,aAAO,O,oBAAA,6GAEoBlB,EAAAA,EAAAA,IAAA,sCAAyCC,IAF7D,cAEGM,EAFH,yBAGIA,EAASC,MAHb,sCAKG,IAAIO,MAAJ,MALH,gFAWA,SAAe9B,EAAtB,kC,aAAO,O,oBAAA,WAA6BQ,GAA7B,gGAEoBO,EAAAA,EAAAA,IAAA,gBAAmBP,EAAnB,4BAAyCQ,IAF7D,cAEGM,EAFH,yBAGIA,EAASC,MAHb,sCAKG,IAAIO,MAAJ,MALH,gFAWA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAAgC1B,GAAhC,gGAEoBO,EAAAA,EAAAA,IAAA,gBAAmBP,EAAnB,4BAAyCQ,IAF7D,cAEGM,EAFH,yBAGIA,EAASC,MAHb,sCAKG,IAAIO,MAAJ,MALH,gF","sources":["components/Cast.jsx","services/api.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchFilmCast, getPoster } from '../services/api';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [actorInfo, setActorInfo] = useState([]);\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    fetchFilmCast(movieId)\n      .then(({ cast }) => {\n        const actorList = cast.map(\n          ({ profile_path, original_name, character, id }) => ({\n            profile_path,\n            original_name,\n            character,\n            id,\n          })\n        );\n        return { actorList };\n      })\n      .then(({ actorList }) => {\n        setActorInfo([...actorList]);\n      })\n      .catch(error => {\n        setError(error.message);\n      });\n  }, [movieId]);\n\n  return (\n    <>\n      <ul>\n        {actorInfo.map(({ profile_path, original_name, character, id }) => (\n          <li key={id}>\n            <img\n              src={getPoster(profile_path)}\n              alt={original_name}\n              width={120}\n            />\n            <p>{original_name}</p>\n            <p>{character}</p>\n          </li>\n        ))}\n      </ul>\n      {error && <p>{error}</p>}\n    </>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\nimport defaultImage from '../defaultImage.jpg';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '8378c884a6341b6bb6a7cfb362550079';\nconst IMAGE_BASE_URL = 'https://image.tmdb.org/t/p/w200/';\nconst NOT_FOUND_IMAGE_URL = defaultImage;\n\nexport const getPoster = url =>\n  url ? IMAGE_BASE_URL + url : NOT_FOUND_IMAGE_URL;\n\n// _______________________MovieDetails________________________________________\n\nexport async function fetchMovieDetails(e) {\n  try {\n    const responce = await axios.get(`movie/${e}?api_key=${API_KEY}`);\n    const {\n      genres,\n      id,\n      title,\n      poster_path,\n      overview,\n      release_date,\n      vote_average,\n    } = responce.data;\n    return {\n      genres,\n      id,\n      title,\n      poster_path,\n      overview,\n      release_date,\n      vote_average,\n    };\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n\n// ______________________________Movies________________________________________\n\nexport async function fetchMovies(query) {\n  try {\n    const responce = await axios.get(\n      `search/movie?api_key=${API_KEY}&query=${query}&page=1`\n    );\n    return responce.data;\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n\n// ______________________________Home____________________________________________\n\nexport async function fetchFilmHome() {\n  try {\n    const responce = await axios.get(`trending/movie/week?api_key=${API_KEY}`);\n    return responce.data;\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n\n// _______________________________Cast_________________________________________________\n\nexport async function fetchFilmCast(id) {\n  try {\n    const responce = await axios.get(`movie/${id}/credits?api_key=${API_KEY}`);\n    return responce.data;\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n\n// _______________________________Reviews______________________________________________________\n\nexport async function fetchFilmReviews(id) {\n  try {\n    const responce = await axios.get(`movie/${id}/reviews?api_key=${API_KEY}`);\n    return responce.data;\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n"],"names":["movieId","useParams","useState","actorInfo","setActorInfo","error","setError","useEffect","fetchFilmCast","then","actorList","cast","map","profile_path","original_name","character","id","catch","message","src","getPoster","alt","width","axios","API_KEY","NOT_FOUND_IMAGE_URL","defaultImage","url","fetchMovieDetails","e","responce","data","genres","title","poster_path","overview","release_date","vote_average","Error","fetchMovies","query","fetchFilmHome","fetchFilmReviews"],"sourceRoot":""}