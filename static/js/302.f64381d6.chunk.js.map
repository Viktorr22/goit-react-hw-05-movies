{"version":3,"file":"static/js/302.f64381d6.chunk.js","mappings":"uMA+CA,UA3CgB,WACd,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAsCE,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KAoBA,OAlBAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAiBR,GACdS,MAAK,YAMJ,MAAO,CAAEC,WANY,EAAdC,QACoBC,KAAI,kBAA8B,CAC3DC,OAD6B,EAAGA,OAEhCC,QAF6B,EAAWA,QAGxCC,GAH6B,EAAoBA,GAApB,IAMhC,IACAN,MAAK,YAAqB,IAAlBC,EAAiB,EAAjBA,WACPN,GAAe,OAAIM,GACpB,IACAM,OAAM,SAAAX,GACLC,EAASD,EAAMY,QAChB,GACJ,GAAE,CAACjB,KAGF,gCAC0B,IAAvBG,EAAYe,QACX,qEAEA,wBACGf,EAAYS,KAAI,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAASC,EAApB,EAAoBA,GAApB,OACf,2BACE,wBAAKF,KACL,uBAAIC,MAFGC,EADM,MASpBV,IAAS,uBAAIA,MAGnB,C,kRC1CDc,EAAAA,EAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAU,mCAEVC,EAAsBC,EAEfC,EAAY,SAAAC,GAAG,OAC1BA,EAJqB,mCAIEA,EAAMH,CADH,EAKrB,SAAeI,EAAtB,kC,aAAO,O,oBAAA,WAAiCC,GAAjC,gHAEoBP,EAAAA,EAAAA,IAAA,gBAAmBO,EAAnB,oBAAgCN,IAFpD,cAEGO,EAFH,SAWCA,EAASC,KAPXC,EAJC,EAIDA,OACAd,EALC,EAKDA,GACAe,EANC,EAMDA,MACAC,EAPC,EAODA,YACAC,EARC,EAQDA,SACAC,EATC,EASDA,aACAC,EAVC,EAUDA,aAVC,kBAYI,CACLL,OAAAA,EACAd,GAAAA,EACAe,MAAAA,EACAC,YAAAA,EACAC,SAAAA,EACAC,aAAAA,EACAC,aAAAA,IAnBC,sCAsBG,IAAIC,MAAJ,MAtBH,gFA4BA,SAAeC,EAAtB,kC,aAAO,O,oBAAA,WAA2BC,GAA3B,gGAEoBlB,EAAAA,EAAAA,IAAA,+BACGC,EADH,kBACoBiB,EADpB,YAFpB,cAEGV,EAFH,yBAKIA,EAASC,MALb,sCAOG,IAAIO,MAAJ,MAPH,gFAaA,SAAeG,IAAtB,+B,aAAO,O,oBAAA,6GAEoBnB,EAAAA,EAAAA,IAAA,sCAAyCC,IAF7D,cAEGO,EAFH,yBAGIA,EAASC,MAHb,sCAKG,IAAIO,MAAJ,MALH,gFAWA,SAAeI,EAAtB,kC,aAAO,O,oBAAA,WAA6BxB,GAA7B,gGAEoBI,EAAAA,EAAAA,IAAA,gBAAmBJ,EAAnB,4BAAyCK,IAF7D,cAEGO,EAFH,yBAGIA,EAASC,MAHb,sCAKG,IAAIO,MAAJ,MALH,gFAWA,SAAe3B,EAAtB,+CAAO,OAAP,oBAAO,WAAgCO,GAAhC,gGAEoBI,EAAAA,EAAAA,IAAA,gBAAmBJ,EAAnB,4BAAyCK,IAF7D,cAEGO,EAFH,yBAGIA,EAASC,MAHb,sCAKG,IAAIO,MAAJ,MALH,gF","sources":["components/Reviews.jsx","services/api.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchFilmReviews } from '../services/api';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviewsInfo, setReviewsInfo] = useState([]);\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    fetchFilmReviews(movieId)\n      .then(({ results }) => {\n        const rewiewList = results.map(({ author, content, id }) => ({\n          author,\n          content,\n          id,\n        }));\n        return { rewiewList };\n      })\n      .then(({ rewiewList }) => {\n        setReviewsInfo([...rewiewList]);\n      })\n      .catch(error => {\n        setError(error.message);\n      });\n  }, [movieId]);\n\n  return (\n    <>\n      {reviewsInfo.length === 0 ? (\n        <p>We don't have any reviews for this movie</p>\n      ) : (\n        <ul>\n          {reviewsInfo.map(({ author, content, id }) => (\n            <li key={id}>\n              <h3>{author}</h3>\n              <p>{content}</p>\n            </li>\n          ))}\n        </ul>\n      )}\n\n      {error && <p>{error}</p>}\n    </>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\nimport defaultImage from '../defaultImage.jpg';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '8378c884a6341b6bb6a7cfb362550079';\nconst IMAGE_BASE_URL = 'https://image.tmdb.org/t/p/w200/';\nconst NOT_FOUND_IMAGE_URL = defaultImage;\n\nexport const getPoster = url =>\n  url ? IMAGE_BASE_URL + url : NOT_FOUND_IMAGE_URL;\n\n// _______________________MovieDetails________________________________________\n\nexport async function fetchMovieDetails(e) {\n  try {\n    const responce = await axios.get(`movie/${e}?api_key=${API_KEY}`);\n    const {\n      genres,\n      id,\n      title,\n      poster_path,\n      overview,\n      release_date,\n      vote_average,\n    } = responce.data;\n    return {\n      genres,\n      id,\n      title,\n      poster_path,\n      overview,\n      release_date,\n      vote_average,\n    };\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n\n// ______________________________Movies________________________________________\n\nexport async function fetchMovies(query) {\n  try {\n    const responce = await axios.get(\n      `search/movie?api_key=${API_KEY}&query=${query}&page=1`\n    );\n    return responce.data;\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n\n// ______________________________Home____________________________________________\n\nexport async function fetchFilmHome() {\n  try {\n    const responce = await axios.get(`trending/movie/week?api_key=${API_KEY}`);\n    return responce.data;\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n\n// _______________________________Cast_________________________________________________\n\nexport async function fetchFilmCast(id) {\n  try {\n    const responce = await axios.get(`movie/${id}/credits?api_key=${API_KEY}`);\n    return responce.data;\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n\n// _______________________________Reviews______________________________________________________\n\nexport async function fetchFilmReviews(id) {\n  try {\n    const responce = await axios.get(`movie/${id}/reviews?api_key=${API_KEY}`);\n    return responce.data;\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n"],"names":["movieId","useParams","useState","reviewsInfo","setReviewsInfo","error","setError","useEffect","fetchFilmReviews","then","rewiewList","results","map","author","content","id","catch","message","length","axios","API_KEY","NOT_FOUND_IMAGE_URL","defaultImage","getPoster","url","fetchMovieDetails","e","responce","data","genres","title","poster_path","overview","release_date","vote_average","Error","fetchMovies","query","fetchFilmHome","fetchFilmCast"],"sourceRoot":""}