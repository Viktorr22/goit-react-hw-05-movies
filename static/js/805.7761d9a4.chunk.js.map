{"version":3,"file":"static/js/805.7761d9a4.chunk.js","mappings":"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","sources":["Pages/Movies.jsx","services/api.js"],"sourcesContent":["import { Link, useLocation, useSearchParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { fetchMovies } from '../services/api';\n\nconst Movies = () => {\n  const [requestName, setRequestName] = useState('');\n  const [error, setError] = useState('');\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query') ?? '';\n  const location = useLocation();\n\n  const FetchMoviesFilms = e => {\n    if (!e) return;\n    fetchMovies(e)\n      .then(({ results }) => {\n        const requestList = results.map(({ original_title, id }) => ({\n          original_title,\n          id,\n        }));\n        return { requestList };\n      })\n      .then(({ requestList }) => {\n        setMovies([...requestList]);\n      })\n      .catch(error => {\n        setError(error.message);\n      });\n  };\n\n  useEffect(() => {\n    FetchMoviesFilms(query);\n  }, [query]);\n\n  const handleNameChange = evt => {\n    const queryValue = evt.target.value;\n    if (queryValue === '') {\n      return setRequestName('');\n    }\n    setRequestName(queryValue);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    if (requestName.trim() === '') {\n      alert('Введите запрос');\n      return;\n    }\n    FetchMoviesFilms(requestName);\n    setSearchParams({ query: requestName });\n    setRequestName('');\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <input type=\"text\" value={requestName} onChange={handleNameChange} />\n        <button type=\"submit\">Search</button>\n      </form>\n      <ul>\n        {movies.map(({ id, original_title }) => (\n          <li key={id}>\n            <Link to={`${id}`} state={{ from: location }}>\n              {original_title}\n            </Link>\n          </li>\n        ))}\n      </ul>\n      {error && <p>{error}</p>}\n    </>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\nimport defaultImage from '../defaultImage.jpg';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '8378c884a6341b6bb6a7cfb362550079';\nconst IMAGE_BASE_URL = 'https://image.tmdb.org/t/p/w200/';\nconst NOT_FOUND_IMAGE_URL = defaultImage;\n\nexport const getPoster = url =>\n  url ? IMAGE_BASE_URL + url : NOT_FOUND_IMAGE_URL;\n\n// _______________________MovieDetails________________________________________\n\nexport async function fetchMovieDetails(e) {\n  try {\n    const responce = await axios.get(`movie/${e}?api_key=${API_KEY}`);\n    const {\n      genres,\n      id,\n      title,\n      poster_path,\n      overview,\n      release_date,\n      vote_average,\n    } = responce.data;\n    return {\n      genres,\n      id,\n      title,\n      poster_path,\n      overview,\n      release_date,\n      vote_average,\n    };\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n\n// ______________________________Movies________________________________________\n\nexport async function fetchMovies(query) {\n  try {\n    const responce = await axios.get(\n      `search/movie?api_key=${API_KEY}&query=${query}&page=1`\n    );\n    return responce.data;\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n\n// ______________________________Home____________________________________________\n\nexport async function fetchFilmHome() {\n  try {\n    const responce = await axios.get(`trending/movie/week?api_key=${API_KEY}`);\n    return responce.data;\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n\n// _______________________________Cast_________________________________________________\n\nexport async function fetchFilmCast(id) {\n  try {\n    const responce = await axios.get(`movie/${id}/credits?api_key=${API_KEY}`);\n    return responce.data;\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n\n// _______________________________Reviews______________________________________________________\n\nexport async function fetchFilmReviews(id) {\n  try {\n    const responce = await axios.get(`movie/${id}/reviews?api_key=${API_KEY}`);\n    return responce.data;\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n"],"names":["useState","requestName","setRequestName","error","setError","movies","setMovies","useSearchParams","searchParams","setSearchParams","query","get","location","useLocation","FetchMoviesFilms","e","fetchMovies","then","requestList","results","map","original_title","id","catch","message","useEffect","onSubmit","event","preventDefault","trim","alert","type","value","onChange","evt","queryValue","target","to","state","from","axios","API_KEY","NOT_FOUND_IMAGE_URL","defaultImage","getPoster","url","fetchMovieDetails","responce","data","genres","title","poster_path","overview","release_date","vote_average","Error","fetchFilmHome","fetchFilmCast","fetchFilmReviews"],"sourceRoot":""}