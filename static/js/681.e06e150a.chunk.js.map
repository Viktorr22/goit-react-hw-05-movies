{"version":3,"file":"static/js/681.e06e150a.chunk.js","mappings":"kOAIAA,EAAAA,EAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAU,mCAEDC,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAAyBC,GAAzB,gGAE2BH,EAAAA,EAAAA,IAAA,gBAAmBG,EAAnB,4BAAyCF,IAFpE,cAEUG,EAFV,yBAGWA,EAASC,MAHpB,sCAKU,IAAIC,MAAJ,MALV,gFAqDA,UA5CgB,WACd,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAsCE,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KAqBA,OAnBAC,EAAAA,EAAAA,YAAU,YAhBZ,SAEyB,GAAVZ,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,EAeXA,CAAUK,GACPQ,MAAK,YAAkB,IAChBC,EADe,EAAdC,QACoBC,KAAI,kBAA8B,CAC3DC,OAD6B,EAAGA,OAEhCC,QAF6B,EAAWA,QAGxCjB,GAH6B,EAAoBA,GAApB,IAM/B,OADAkB,QAAQC,IAAIN,GACL,CAAEA,WAAAA,EACV,IACAD,MAAK,YAAqB,IAAlBC,EAAiB,EAAjBA,WACPL,GAAe,OAAIK,GACpB,IACAO,OAAM,SAAAX,GACLC,EAASD,EAAMY,QAChB,GACJ,GAAE,CAACjB,KAGF,gCAC0B,IAAvBG,EAAYe,QACX,qEAEA,wBACGf,EAAYQ,KAAI,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAASjB,EAApB,EAAoBA,GAApB,OACf,2BACE,wBAAKgB,KACL,uBAAIC,MAFGjB,EADM,MASpBS,IAAS,uBAAIA,MAGnB,C","sources":["components/Reviews.jsx"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '8378c884a6341b6bb6a7cfb362550079';\n\nasync function fetchFilm(id) {\n  try {\n    const responce = await axios.get(`movie/${id}/reviews?api_key=${API_KEY}`);\n    return responce.data;\n  } catch (error) {\n    throw new Error(error);\n  }\n}\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviewsInfo, setReviewsInfo] = useState([]);\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    fetchFilm(movieId)\n      .then(({ results }) => {\n        const rewiewList = results.map(({ author, content, id }) => ({\n          author,\n          content,\n          id,\n        }));\n        console.log(rewiewList);\n        return { rewiewList };\n      })\n      .then(({ rewiewList }) => {\n        setReviewsInfo([...rewiewList]);\n      })\n      .catch(error => {\n        setError(error.message);\n      });\n  }, [movieId]);\n\n  return (\n    <>\n      {reviewsInfo.length === 0 ? (\n        <p>We don't have any reviews for this movie</p>\n      ) : (\n        <ul>\n          {reviewsInfo.map(({ author, content, id }) => (\n            <li key={id}>\n              <h3>{author}</h3>\n              <p>{content}</p>\n            </li>\n          ))}\n        </ul>\n      )}\n\n      {error && <p>{error}</p>}\n    </>\n  );\n};\n\nexport default Reviews;\n"],"names":["axios","API_KEY","fetchFilm","id","responce","data","Error","movieId","useParams","useState","reviewsInfo","setReviewsInfo","error","setError","useEffect","then","rewiewList","results","map","author","content","console","log","catch","message","length"],"sourceRoot":""}